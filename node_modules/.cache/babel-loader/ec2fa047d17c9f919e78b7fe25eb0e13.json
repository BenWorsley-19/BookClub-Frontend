{"ast":null,"code":"const SERVER_URL = 'http://localhost:8080';\nexport async function getAllQuotes() {\n  const response = await fetch(`${SERVER_URL}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${SERVER_URL}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${SERVER_URL}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${SERVER_URL}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function addRecommendation(requestData) {\n  const response = await fetch(`${SERVER_URL}/recommendations/${requestData.toReadListId}`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.recommendationData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add recommendation.');\n  } // TODO\n\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllRecommendations(toReadListId) {\n  const response = await fetch(`${SERVER_URL}/recommendations/${toReadListId}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get recommendations.');\n  }\n\n  const transformedRecommendations = [];\n\n  for (const key in data) {\n    const rec = {\n      id: key,\n      ...data[key]\n    };\n    transformedRecommendations.push(rec);\n  }\n\n  return transformedRecommendations;\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${SERVER_URL}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["/home/benworsley/projects/book-club-frontend/src/lib/api.js"],"names":["SERVER_URL","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","addRecommendation","toReadListId","recommendationData","getAllRecommendations","transformedRecommendations","rec","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const SERVER_URL = 'http://localhost:8080';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${SERVER_URL}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${SERVER_URL}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${SERVER_URL}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${SERVER_URL}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function addRecommendation(requestData) {\n  const response = await fetch(`${SERVER_URL}/recommendations/${requestData.toReadListId}`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.recommendationData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add recommendation.');\n  }\n\n  // TODO\n  return { commentId: data.name };\n}\n\nexport async function getAllRecommendations(toReadListId) {\n  const response = await fetch(`${SERVER_URL}/recommendations/${toReadListId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get recommendations.');\n  }\n\n  const transformedRecommendations = [];\n  for (const key in data) {\n    const rec = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedRecommendations.push(rec);\n  }\n\n  return transformedRecommendations;\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${SERVER_URL}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}